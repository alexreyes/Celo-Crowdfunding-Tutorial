import { Hash } from "@stablelib/hash";
import { BLOCK_SIZE, Config } from "@stablelib/blake2s";
export { BLOCK_SIZE };
/** Maximum output length */
export declare const MAX_DIGEST_LENGTH = 65534;
export declare class BLAKE2Xs implements Hash {
    digestLength: number;
    readonly blockSize: number;
    private _hash;
    private _h0?;
    private _buf;
    private _bufPos;
    private _outConfig;
    private _left;
    /**
     * Creates a new BLAKE2Xs instance with the given digest length. If digest
     * length is not given, it's considered unknown in advance, thus allowing
     * to generate any number of bytes up to 2^32-1.
     */
    constructor(digestLength?: number, config?: Config);
    update(data: Uint8Array, dataLength?: number): this;
    stream(dst: Uint8Array): this;
    finish: (dst: Uint8Array) => this;
    digest(): Uint8Array;
    reset(): this;
    clean(): void;
}
export declare function xof(digestLength: number, data: Uint8Array, key?: Uint8Array): Uint8Array;
