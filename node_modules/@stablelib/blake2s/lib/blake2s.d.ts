import { SerializableHash } from "@stablelib/hash";
export declare const BLOCK_SIZE = 64;
export declare const DIGEST_LENGTH = 32;
export declare const KEY_LENGTH = 32;
export declare const PERSONALIZATION_LENGTH = 8;
export declare const SALT_LENGTH = 8;
export declare const MAX_LEAF_SIZE: number;
export declare const MAX_NODE_OFFSET: number;
export declare const MAX_FANOUT = 255;
export declare const MAX_MAX_DEPTH = 255;
export declare type Config = {
    key?: Uint8Array;
    salt?: Uint8Array;
    personalization?: Uint8Array;
    tree?: Tree;
};
export declare type Tree = {
    fanout: number;
    maxDepth: number;
    leafSize: number;
    nodeOffset: number;
    nodeDepth: number;
    innerDigestLength: number;
    lastNode: boolean;
};
export declare class BLAKE2s implements SerializableHash {
    digestLength: number;
    readonly blockSize: number;
    private _state;
    private _buffer;
    private _bufferLength;
    private _ctr0;
    private _ctr1;
    private _flag0;
    private _flag1;
    private _lastNode;
    private _finished;
    private _paddedKey;
    private _initialState;
    constructor(digestLength?: number, config?: Config);
    reset(): this;
    validateConfig(config: Config): void;
    update(data: Uint8Array, dataLength?: number): this;
    finish(out: Uint8Array): this;
    digest(): Uint8Array;
    clean(): void;
    saveState(): SavedState;
    restoreState(savedState: SavedState): this;
    cleanSavedState(savedState: SavedState): void;
    private _processBlock(length);
}
export declare type SavedState = {
    state: Uint32Array;
    buffer: Uint8Array;
    bufferLength: number;
    ctr0: number;
    ctr1: number;
    flag0: number;
    flag1: number;
    lastNode: boolean;
    paddedKey: Uint8Array | undefined;
    initialState: Uint32Array;
};
export declare function hash(data: Uint8Array, digestLength?: number, config?: Config): Uint8Array;
