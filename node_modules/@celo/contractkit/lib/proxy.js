"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Accounts_1 = require("./generated/Accounts");
var Attestations_1 = require("./generated/Attestations");
var BlockchainParameters_1 = require("./generated/BlockchainParameters");
var DoubleSigningSlasher_1 = require("./generated/DoubleSigningSlasher");
var DowntimeSlasher_1 = require("./generated/DowntimeSlasher");
var Election_1 = require("./generated/Election");
var EpochRewards_1 = require("./generated/EpochRewards");
var Escrow_1 = require("./generated/Escrow");
var Exchange_1 = require("./generated/Exchange");
var FeeCurrencyWhitelist_1 = require("./generated/FeeCurrencyWhitelist");
var Freezer_1 = require("./generated/Freezer");
var GasPriceMinimum_1 = require("./generated/GasPriceMinimum");
var GoldToken_1 = require("./generated/GoldToken");
var Governance_1 = require("./generated/Governance");
var LockedGold_1 = require("./generated/LockedGold");
var MetaTransactionWallet_1 = require("./generated/MetaTransactionWallet");
var MetaTransactionWalletDeployer_1 = require("./generated/MetaTransactionWalletDeployer");
var MultiSig_1 = require("./generated/MultiSig");
var Proxy_1 = require("./generated/Proxy");
var Random_1 = require("./generated/Random");
var Registry_1 = require("./generated/Registry");
var Reserve_1 = require("./generated/Reserve");
var SortedOracles_1 = require("./generated/SortedOracles");
var StableToken_1 = require("./generated/StableToken");
var TransferWhitelist_1 = require("./generated/TransferWhitelist");
var Validators_1 = require("./generated/Validators");
exports.GET_IMPLEMENTATION_ABI = {
    constant: true,
    inputs: [],
    name: '_getImplementation',
    outputs: [
        {
            name: 'implementation',
            type: 'address',
        },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
    signature: '0x42404e07',
};
exports.SET_IMPLEMENTATION_ABI = {
    constant: false,
    inputs: [
        {
            name: 'implementation',
            type: 'address',
        },
    ],
    name: '_setImplementation',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    signature: '0xbb913f41',
};
exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI = {
    constant: false,
    inputs: [
        {
            name: 'implementation',
            type: 'address',
        },
        {
            name: 'callbackData',
            type: 'bytes',
        },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    signature: '0x03386ba3',
};
exports.PROXY_ABI = [
    exports.GET_IMPLEMENTATION_ABI,
    exports.SET_IMPLEMENTATION_ABI,
    exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI,
];
exports.PROXY_SET_IMPLEMENTATION_SIGNATURE = exports.SET_IMPLEMENTATION_ABI.signature;
exports.PROXY_SET_AND_INITIALIZE_IMPLEMENTATION_SIGNATURE = exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI.signature;
var findInitializeAbi = function (items) { return items.find(function (item) { return item.name === 'initialize'; }); };
var initializeAbiMap = {
    AccountsProxy: findInitializeAbi(Accounts_1.ABI),
    AttestationsProxy: findInitializeAbi(Attestations_1.ABI),
    BlockchainParametersProxy: findInitializeAbi(BlockchainParameters_1.ABI),
    DoubleSigningSlasherProxy: findInitializeAbi(DoubleSigningSlasher_1.ABI),
    DowntimeSlasherProxy: findInitializeAbi(DowntimeSlasher_1.ABI),
    ElectionProxy: findInitializeAbi(Election_1.ABI),
    EpochRewardsProxy: findInitializeAbi(EpochRewards_1.ABI),
    EscrowProxy: findInitializeAbi(Escrow_1.ABI),
    ExchangeProxy: findInitializeAbi(Exchange_1.ABI),
    FeeCurrencyWhitelistProxy: findInitializeAbi(FeeCurrencyWhitelist_1.ABI),
    FreezerProxy: findInitializeAbi(Freezer_1.ABI),
    GasPriceMinimumProxy: findInitializeAbi(GasPriceMinimum_1.ABI),
    GoldTokenProxy: findInitializeAbi(GoldToken_1.ABI),
    GovernanceProxy: findInitializeAbi(Governance_1.ABI),
    LockedGoldProxy: findInitializeAbi(LockedGold_1.ABI),
    MetaTransactionWalletProxy: findInitializeAbi(MetaTransactionWallet_1.ABI),
    MetaTransactionWalletDeployerProxy: findInitializeAbi(MetaTransactionWalletDeployer_1.ABI),
    MultiSigProxy: findInitializeAbi(MultiSig_1.ABI),
    ProxyProxy: findInitializeAbi(Proxy_1.ABI),
    RandomProxy: findInitializeAbi(Random_1.ABI),
    RegistryProxy: findInitializeAbi(Registry_1.ABI),
    ReserveProxy: findInitializeAbi(Reserve_1.ABI),
    SortedOraclesProxy: findInitializeAbi(SortedOracles_1.ABI),
    StableTokenProxy: findInitializeAbi(StableToken_1.ABI),
    TransferWhitelistProxy: findInitializeAbi(TransferWhitelist_1.ABI),
    ValidatorsProxy: findInitializeAbi(Validators_1.ABI),
};
exports.getInitializeAbiOfImplementation = function (proxyContractName) {
    var initializeAbi = initializeAbiMap[proxyContractName];
    if (!initializeAbi) {
        throw new Error("Initialize method not found on implementation of " + proxyContractName);
    }
    return initializeAbi;
};
exports.setImplementationOnProxy = function (address, web3) {
    var proxyWeb3Contract = new web3.eth.Contract(exports.PROXY_ABI);
    return proxyWeb3Contract.methods._setImplementation(address);
};
//# sourceMappingURL=proxy.js.map