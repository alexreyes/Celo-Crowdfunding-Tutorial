import { BigNumber } from 'bignumber.js';
import { BlockchainParameters } from '../generated/BlockchainParameters';
import { BaseWrapper } from './BaseWrapper';
export interface ClientVersion {
    major: number;
    minor: number;
    patch: number;
}
export interface BlockchainParametersConfig {
    blockGasLimit: BigNumber;
    minimumClientVersion: ClientVersion;
    intrinsicGasForAlternativeFeeCurrency: BigNumber;
}
/**
 * Network parameters that are configurable by governance.
 */
export declare class BlockchainParametersWrapper extends BaseWrapper<BlockchainParameters> {
    /**
     * Get the extra intrinsic gas for transactions, where gas is paid using non-gold currency.
     */
    getIntrinsicGasForAlternativeFeeCurrency: () => Promise<BigNumber>;
    /**
     * Setting the extra intrinsic gas for transactions, where gas is paid using non-gold currency.
     */
    setIntrinsicGasForAlternativeFeeCurrency: (gas: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    /**
     * Getting the block gas limit.
     */
    getBlockGasLimit: () => Promise<BigNumber>;
    /**
     * Setting the block gas limit.
     */
    setBlockGasLimit: (gasLimit: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    /**
     * Get minimum client version.
     */
    getMinimumClientVersion(): Promise<ClientVersion>;
    /**
     * Set minimum client version.
     */
    setMinimumClientVersion: (major: string | number, minor: string | number, patch: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    /**
     * Returns current configuration parameters.
     */
    getConfig(): Promise<BlockchainParametersConfig>;
    /**
     * Getting the uptime lookback window.
     */
    getUptimeLookbackWindow: () => Promise<number>;
    /**
     * Setting the uptime lookback window.
     */
    setUptimeLookbackWindow: (window: string | number) => import("@celo/connect").CeloTransactionObject<void>;
}
