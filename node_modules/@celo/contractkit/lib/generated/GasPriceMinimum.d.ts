/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface GasPriceMinimum extends Contract {
    clone(): GasPriceMinimum;
    methods: {
        adjustmentSpeed(): CeloTxObject<string>;
        gasPriceMinimum(): CeloTxObject<string>;
        gasPriceMinimumFloor(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        targetDensity(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(_registryAddress: string, _gasPriceMinimumFloor: number | string, _targetDensity: number | string, _adjustmentSpeed: number | string): CeloTxObject<void>;
        setAdjustmentSpeed(_adjustmentSpeed: number | string): CeloTxObject<void>;
        setTargetDensity(_targetDensity: number | string): CeloTxObject<void>;
        setGasPriceMinimumFloor(_gasPriceMinimumFloor: number | string): CeloTxObject<void>;
        getGasPriceMinimum(tokenAddress: string): CeloTxObject<string>;
        updateGasPriceMinimum(blockGasTotal: number | string, blockGasLimit: number | string): CeloTxObject<string>;
        getUpdatedGasPriceMinimum(blockGasTotal: number | string, blockGasLimit: number | string): CeloTxObject<string>;
    };
    events: {
        AdjustmentSpeedSet: ContractEvent<string>;
        GasPriceMinimumFloorSet: ContractEvent<string>;
        GasPriceMinimumUpdated: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        TargetDensitySet: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newGasPriceMinimum(web3: Web3, address: string): GasPriceMinimum;
