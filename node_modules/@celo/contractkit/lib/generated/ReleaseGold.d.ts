/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface ReleaseGold extends Contract {
    clone(): ReleaseGold;
    methods: {
        EXPIRATION_TIME(): CeloTxObject<string>;
        beneficiary(): CeloTxObject<string>;
        canValidate(): CeloTxObject<boolean>;
        canVote(): CeloTxObject<boolean>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        liquidityProvisionMet(): CeloTxObject<boolean>;
        maxDistribution(): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        refundAddress(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        releaseOwner(): CeloTxObject<string>;
        releaseSchedule(): CeloTxObject<{
            releaseStartTime: string;
            releaseCliff: string;
            numReleasePeriods: string;
            releasePeriod: string;
            amountReleasedPerPeriod: string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
        }>;
        renounceOwnership(): CeloTxObject<void>;
        revocationInfo(): CeloTxObject<{
            revocable: boolean;
            canExpire: boolean;
            releasedBalanceAtRevoke: string;
            revokeTime: string;
            0: boolean;
            1: boolean;
            2: string;
            3: string;
        }>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        totalWithdrawn(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        transfer(to: string, value: number | string): CeloTxObject<void>;
        initialize(releaseStartTime: number | string, releaseCliffTime: number | string, numReleasePeriods: number | string, releasePeriod: number | string, amountReleasedPerPeriod: number | string, revocable: boolean, _beneficiary: string, _releaseOwner: string, _refundAddress: string, subjectToLiquidityProvision: boolean, initialDistributionRatio: number | string, _canValidate: boolean, _canVote: boolean, registryAddress: string): CeloTxObject<void>;
        isRevoked(): CeloTxObject<boolean>;
        setLiquidityProvision(): CeloTxObject<void>;
        setCanExpire(_canExpire: boolean): CeloTxObject<void>;
        setMaxDistribution(distributionRatio: number | string): CeloTxObject<void>;
        setBeneficiary(newBeneficiary: string): CeloTxObject<void>;
        withdraw(amount: number | string): CeloTxObject<void>;
        refundAndFinalize(): CeloTxObject<void>;
        revoke(): CeloTxObject<void>;
        expire(): CeloTxObject<void>;
        getTotalBalance(): CeloTxObject<string>;
        getRemainingTotalBalance(): CeloTxObject<string>;
        getRemainingUnlockedBalance(): CeloTxObject<string>;
        getRemainingLockedBalance(): CeloTxObject<string>;
        getCurrentReleasedTotalAmount(): CeloTxObject<string>;
        lockGold(value: number | string): CeloTxObject<void>;
        unlockGold(value: number | string): CeloTxObject<void>;
        relockGold(index: number | string, value: number | string): CeloTxObject<void>;
        withdrawLockedGold(index: number | string): CeloTxObject<void>;
        authorizeVoteSigner(signer: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        authorizeValidatorSigner(signer: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        authorizeValidatorSignerWithPublicKey(signer: string, v: number | string, r: string | number[], s: string | number[], ecdsaPublicKey: string | number[]): CeloTxObject<void>;
        authorizeValidatorSignerWithKeys(signer: string, v: number | string, r: string | number[], s: string | number[], ecdsaPublicKey: string | number[], blsPublicKey: string | number[], blsPop: string | number[]): CeloTxObject<void>;
        authorizeAttestationSigner(signer: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        setAccount(name: string, dataEncryptionKey: string | number[], walletAddress: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        createAccount(): CeloTxObject<void>;
        setAccountName(name: string): CeloTxObject<void>;
        setAccountWalletAddress(walletAddress: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        setAccountDataEncryptionKey(dataEncryptionKey: string | number[]): CeloTxObject<void>;
        setAccountMetadataURL(metadataURL: string): CeloTxObject<void>;
        revokeActive(group: string, value: number | string, lesser: string, greater: string, index: number | string): CeloTxObject<void>;
        revokePending(group: string, value: number | string, lesser: string, greater: string, index: number | string): CeloTxObject<void>;
    };
    events: {
        BeneficiarySet: ContractEvent<string>;
        CanExpireSet: ContractEvent<boolean>;
        DistributionLimitSet: ContractEvent<{
            beneficiary: string;
            maxDistribution: string;
            0: string;
            1: string;
        }>;
        LiquidityProvisionSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        ReleaseGoldInstanceCreated: ContractEvent<{
            beneficiary: string;
            atAddress: string;
            0: string;
            1: string;
        }>;
        ReleaseGoldInstanceDestroyed: ContractEvent<{
            beneficiary: string;
            atAddress: string;
            0: string;
            1: string;
        }>;
        ReleaseScheduleRevoked: ContractEvent<{
            revokeTimestamp: string;
            releasedBalanceAtRevoke: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newReleaseGold(web3: Web3, address: string): ReleaseGold;
