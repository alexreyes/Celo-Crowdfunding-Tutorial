/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface EpochRewards extends Contract {
    clone(): EpochRewards;
    methods: {
        carbonOffsettingPartner(): CeloTxObject<string>;
        checkProofOfPossession(sender: string, blsKey: string | number[], blsPop: string | number[]): CeloTxObject<boolean>;
        fractionMulExp(aNumerator: number | string, aDenominator: number | string, bNumerator: number | string, bDenominator: number | string, exponent: number | string, _decimals: number | string): CeloTxObject<{
            0: string;
            1: string;
        }>;
        getBlockNumberFromHeader(header: string | number[]): CeloTxObject<string>;
        getEpochNumber(): CeloTxObject<string>;
        getEpochNumberOfBlock(blockNumber: number | string): CeloTxObject<string>;
        getEpochSize(): CeloTxObject<string>;
        getParentSealBitmap(blockNumber: number | string): CeloTxObject<string>;
        getVerifiedSealBitmapFromHeader(header: string | number[]): CeloTxObject<string>;
        hashHeader(header: string | number[]): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        minQuorumSize(blockNumber: number | string): CeloTxObject<string>;
        minQuorumSizeInCurrentSet(): CeloTxObject<string>;
        numberValidatorsInCurrentSet(): CeloTxObject<string>;
        numberValidatorsInSet(blockNumber: number | string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        startTime(): CeloTxObject<string>;
        targetValidatorEpochPayment(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        validatorSignerAddressFromCurrentSet(index: number | string): CeloTxObject<string>;
        validatorSignerAddressFromSet(index: number | string, blockNumber: number | string): CeloTxObject<string>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string, targetVotingYieldInitial: number | string, targetVotingYieldMax: number | string, targetVotingYieldAdjustmentFactor: number | string, rewardsMultiplierMax: number | string, rewardsMultiplierUnderspendAdjustmentFactor: number | string, rewardsMultiplierOverspendAdjustmentFactor: number | string, _targetVotingGoldFraction: number | string, _targetValidatorEpochPayment: number | string, _communityRewardFraction: number | string, _carbonOffsettingPartner: string, _carbonOffsettingFraction: number | string): CeloTxObject<void>;
        getTargetVotingYieldParameters(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
        }>;
        getRewardsMultiplierParameters(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
        }>;
        setCommunityRewardFraction(value: number | string): CeloTxObject<boolean>;
        getCommunityRewardFraction(): CeloTxObject<string>;
        setCarbonOffsettingFund(partner: string, value: number | string): CeloTxObject<boolean>;
        getCarbonOffsettingFraction(): CeloTxObject<string>;
        setTargetVotingGoldFraction(value: number | string): CeloTxObject<boolean>;
        getTargetVotingGoldFraction(): CeloTxObject<string>;
        setTargetValidatorEpochPayment(value: number | string): CeloTxObject<boolean>;
        setRewardsMultiplierParameters(max: number | string, underspendAdjustmentFactor: number | string, overspendAdjustmentFactor: number | string): CeloTxObject<boolean>;
        setTargetVotingYieldParameters(max: number | string, adjustmentFactor: number | string): CeloTxObject<boolean>;
        setTargetVotingYield(targetVotingYield: number | string): CeloTxObject<boolean>;
        getTargetGoldTotalSupply(): CeloTxObject<string>;
        getTargetVoterRewards(): CeloTxObject<string>;
        getTargetTotalEpochPaymentsInGold(): CeloTxObject<string>;
        getRewardsMultiplier(): CeloTxObject<string>;
        getVotingGoldFraction(): CeloTxObject<string>;
        updateTargetVotingYield(): CeloTxObject<void>;
        isReserveLow(): CeloTxObject<boolean>;
        calculateTargetEpochRewards(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
    };
    events: {
        CarbonOffsettingFundSet: ContractEvent<{
            partner: string;
            fraction: string;
            0: string;
            1: string;
        }>;
        CommunityRewardFractionSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        RewardsMultiplierParametersSet: ContractEvent<{
            max: string;
            underspendAdjustmentFactor: string;
            overspendAdjustmentFactor: string;
            0: string;
            1: string;
            2: string;
        }>;
        TargetValidatorEpochPaymentSet: ContractEvent<string>;
        TargetVotingGoldFractionSet: ContractEvent<string>;
        TargetVotingYieldParametersSet: ContractEvent<{
            max: string;
            adjustmentFactor: string;
            0: string;
            1: string;
        }>;
        TargetVotingYieldSet: ContractEvent<string>;
        TargetVotingYieldUpdated: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newEpochRewards(web3: Web3, address: string): EpochRewards;
