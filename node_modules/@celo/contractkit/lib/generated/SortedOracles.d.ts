/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface SortedOracles extends Contract {
    clone(): SortedOracles;
    methods: {
        initialized(): CeloTxObject<boolean>;
        isOracle(arg0: string, arg1: string): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        oracles(arg0: string, arg1: number | string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        reportExpirySeconds(): CeloTxObject<string>;
        tokenReportExpirySeconds(arg0: string): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(_reportExpirySeconds: number | string): CeloTxObject<void>;
        setReportExpiry(_reportExpirySeconds: number | string): CeloTxObject<void>;
        setTokenReportExpiry(_token: string, _reportExpirySeconds: number | string): CeloTxObject<void>;
        addOracle(token: string, oracleAddress: string): CeloTxObject<void>;
        removeOracle(token: string, oracleAddress: string, index: number | string): CeloTxObject<void>;
        removeExpiredReports(token: string, n: number | string): CeloTxObject<void>;
        isOldestReportExpired(token: string): CeloTxObject<{
            0: boolean;
            1: string;
        }>;
        report(token: string, value: number | string, lesserKey: string, greaterKey: string): CeloTxObject<void>;
        numRates(token: string): CeloTxObject<string>;
        medianRate(token: string): CeloTxObject<{
            0: string;
            1: string;
        }>;
        getRates(token: string): CeloTxObject<{
            0: string[];
            1: string[];
            2: string[];
        }>;
        numTimestamps(token: string): CeloTxObject<string>;
        medianTimestamp(token: string): CeloTxObject<string>;
        getTimestamps(token: string): CeloTxObject<{
            0: string[];
            1: string[];
            2: string[];
        }>;
        getOracles(token: string): CeloTxObject<string[]>;
        getTokenReportExpirySeconds(token: string): CeloTxObject<string>;
    };
    events: {
        MedianUpdated: ContractEvent<{
            token: string;
            value: string;
            0: string;
            1: string;
        }>;
        OracleAdded: ContractEvent<{
            token: string;
            oracleAddress: string;
            0: string;
            1: string;
        }>;
        OracleRemoved: ContractEvent<{
            token: string;
            oracleAddress: string;
            0: string;
            1: string;
        }>;
        OracleReportRemoved: ContractEvent<{
            token: string;
            oracle: string;
            0: string;
            1: string;
        }>;
        OracleReported: ContractEvent<{
            token: string;
            oracle: string;
            timestamp: string;
            value: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        ReportExpirySet: ContractEvent<string>;
        TokenReportExpirySet: ContractEvent<{
            token: string;
            reportExpiry: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newSortedOracles(web3: Web3, address: string): SortedOracles;
