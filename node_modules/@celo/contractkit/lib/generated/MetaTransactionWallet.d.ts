/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface MetaTransactionWallet extends Contract {
    clone(): MetaTransactionWallet;
    methods: {
        EIP712_EXECUTE_META_TRANSACTION_TYPEHASH(): CeloTxObject<string>;
        eip712DomainSeparator(): CeloTxObject<string>;
        guardian(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        nonce(): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        signer(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(_signer: string): CeloTxObject<void>;
        setSigner(_signer: string): CeloTxObject<void>;
        setGuardian(_guardian: string): CeloTxObject<void>;
        recoverWallet(newSigner: string): CeloTxObject<void>;
        setEip712DomainSeparator(): CeloTxObject<void>;
        getMetaTransactionDigest(destination: string, value: number | string, data: string | number[], _nonce: number | string): CeloTxObject<string>;
        getMetaTransactionSigner(destination: string, value: number | string, data: string | number[], _nonce: number | string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<string>;
        executeMetaTransaction(destination: string, value: number | string, data: string | number[], v: number | string, r: string | number[], s: string | number[]): CeloTxObject<string>;
        executeTransaction(destination: string, value: number | string, data: string | number[]): CeloTxObject<string>;
        executeTransactions(destinations: string[], values: (number | string)[], data: string | number[], dataLengths: (number | string)[]): CeloTxObject<{
            0: string;
            1: string[];
        }>;
    };
    events: {
        Deposit: ContractEvent<{
            sender: string;
            value: string;
            0: string;
            1: string;
        }>;
        EIP712DomainSeparatorSet: ContractEvent<string>;
        GuardianSet: ContractEvent<string>;
        MetaTransactionExecution: ContractEvent<{
            destination: string;
            value: string;
            data: string;
            nonce: string;
            returnData: string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        SignerSet: ContractEvent<string>;
        TransactionExecution: ContractEvent<{
            destination: string;
            value: string;
            data: string;
            returnData: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        WalletRecovered: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newMetaTransactionWallet(web3: Web3, address: string): MetaTransactionWallet;
