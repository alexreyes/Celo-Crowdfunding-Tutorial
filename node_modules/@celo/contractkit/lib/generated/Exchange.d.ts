/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface Exchange extends Contract {
    clone(): Exchange;
    methods: {
        goldBucket(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        lastBucketUpdate(): CeloTxObject<string>;
        minimumReports(): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        reserveFraction(): CeloTxObject<string>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        spread(): CeloTxObject<string>;
        stable(): CeloTxObject<string>;
        stableBucket(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        updateFrequency(): CeloTxObject<string>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string, stableToken: string, _spread: number | string, _reserveFraction: number | string, _updateFrequency: number | string, _minimumReports: number | string): CeloTxObject<void>;
        sell(sellAmount: number | string, minBuyAmount: number | string, sellGold: boolean): CeloTxObject<string>;
        exchange(sellAmount: number | string, minBuyAmount: number | string, sellGold: boolean): CeloTxObject<string>;
        buy(buyAmount: number | string, maxSellAmount: number | string, buyGold: boolean): CeloTxObject<string>;
        getBuyTokenAmount(sellAmount: number | string, sellGold: boolean): CeloTxObject<string>;
        getSellTokenAmount(buyAmount: number | string, sellGold: boolean): CeloTxObject<string>;
        getBuyAndSellBuckets(sellGold: boolean): CeloTxObject<{
            0: string;
            1: string;
        }>;
        setUpdateFrequency(newUpdateFrequency: number | string): CeloTxObject<void>;
        setMinimumReports(newMininumReports: number | string): CeloTxObject<void>;
        setStableToken(newStableToken: string): CeloTxObject<void>;
        setSpread(newSpread: number | string): CeloTxObject<void>;
        setReserveFraction(newReserveFraction: number | string): CeloTxObject<void>;
    };
    events: {
        BucketsUpdated: ContractEvent<{
            goldBucket: string;
            stableBucket: string;
            0: string;
            1: string;
        }>;
        Exchanged: ContractEvent<{
            exchanger: string;
            sellAmount: string;
            buyAmount: string;
            soldGold: boolean;
            0: string;
            1: string;
            2: string;
            3: boolean;
        }>;
        MinimumReportsSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        ReserveFractionSet: ContractEvent<string>;
        SpreadSet: ContractEvent<string>;
        StableTokenSet: ContractEvent<string>;
        UpdateFrequencySet: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newExchange(web3: Web3, address: string): Exchange;
