/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface TransferWhitelist extends Contract {
    clone(): TransferWhitelist;
    methods: {
        isOwner(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        whitelistedContractIdentifiers(arg0: number | string): CeloTxObject<string>;
        whitelistAddress(newAddress: string): CeloTxObject<void>;
        removeAddress(removedAddress: string, index: number | string): CeloTxObject<void>;
        whitelistRegisteredContract(contractIdentifier: string | number[]): CeloTxObject<void>;
        getNumberOfWhitelistedContractIdentifiers(): CeloTxObject<string>;
        setDirectlyWhitelistedAddresses(_whitelist: string[]): CeloTxObject<void>;
        setWhitelistedContractIdentifiers(_registeredContracts: (string | number[])[]): CeloTxObject<void>;
        getWhitelist(): CeloTxObject<string[]>;
        selfDestruct(): CeloTxObject<void>;
    };
    events: {
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        WhitelistedAddress: ContractEvent<string>;
        WhitelistedAddressRemoved: ContractEvent<string>;
        WhitelistedContractIdentifier: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newTransferWhitelist(web3: Web3, address: string): TransferWhitelist;
