/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface Reserve extends Contract {
    clone(): Reserve;
    methods: {
        assetAllocationSymbols(arg0: number | string): CeloTxObject<string>;
        assetAllocationWeights(arg0: string | number[]): CeloTxObject<string>;
        exchangeSpenderAddresses(arg0: number | string): CeloTxObject<string>;
        frozenReserveGoldDays(): CeloTxObject<string>;
        frozenReserveGoldStartBalance(): CeloTxObject<string>;
        frozenReserveGoldStartDay(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isExchangeSpender(arg0: string): CeloTxObject<boolean>;
        isOtherReserveAddress(arg0: string): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        isSpender(arg0: string): CeloTxObject<boolean>;
        isToken(arg0: string): CeloTxObject<boolean>;
        lastSpendingDay(): CeloTxObject<string>;
        otherReserveAddresses(arg0: number | string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        spendingLimit(): CeloTxObject<string>;
        tobinTax(): CeloTxObject<string>;
        tobinTaxCache(): CeloTxObject<{
            numerator: string;
            timestamp: string;
            0: string;
            1: string;
        }>;
        tobinTaxReserveRatio(): CeloTxObject<string>;
        tobinTaxStalenessThreshold(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string, _tobinTaxStalenessThreshold: number | string, _spendingRatio: number | string, _frozenGold: number | string, _frozenDays: number | string, _assetAllocationSymbols: (string | number[])[], _assetAllocationWeights: (number | string)[], _tobinTax: number | string, _tobinTaxReserveRatio: number | string): CeloTxObject<void>;
        setTobinTaxStalenessThreshold(value: number | string): CeloTxObject<void>;
        setTobinTax(value: number | string): CeloTxObject<void>;
        setTobinTaxReserveRatio(value: number | string): CeloTxObject<void>;
        setDailySpendingRatio(ratio: number | string): CeloTxObject<void>;
        getDailySpendingRatio(): CeloTxObject<string>;
        setFrozenGold(frozenGold: number | string, frozenDays: number | string): CeloTxObject<void>;
        setAssetAllocations(symbols: (string | number[])[], weights: (number | string)[]): CeloTxObject<void>;
        addToken(token: string): CeloTxObject<boolean>;
        removeToken(token: string, index: number | string): CeloTxObject<boolean>;
        addOtherReserveAddress(reserveAddress: string): CeloTxObject<boolean>;
        removeOtherReserveAddress(reserveAddress: string, index: number | string): CeloTxObject<boolean>;
        addSpender(spender: string): CeloTxObject<void>;
        removeSpender(spender: string): CeloTxObject<void>;
        addExchangeSpender(spender: string): CeloTxObject<void>;
        removeExchangeSpender(spender: string, index: number | string): CeloTxObject<void>;
        getExchangeSpenders(): CeloTxObject<string[]>;
        transferGold(to: string, value: number | string): CeloTxObject<boolean>;
        transferExchangeGold(to: string, value: number | string): CeloTxObject<boolean>;
        getOrComputeTobinTax(): CeloTxObject<{
            0: string;
            1: string;
        }>;
        getTokens(): CeloTxObject<string[]>;
        getOtherReserveAddresses(): CeloTxObject<string[]>;
        getAssetAllocationSymbols(): CeloTxObject<string[]>;
        getAssetAllocationWeights(): CeloTxObject<string[]>;
        getUnfrozenBalance(): CeloTxObject<string>;
        getReserveGoldBalance(): CeloTxObject<string>;
        getOtherReserveAddressesGoldBalance(): CeloTxObject<string>;
        getUnfrozenReserveGoldBalance(): CeloTxObject<string>;
        getFrozenReserveGoldBalance(): CeloTxObject<string>;
        getReserveRatio(): CeloTxObject<string>;
    };
    events: {
        AssetAllocationSet: ContractEvent<{
            symbols: string[];
            weights: string[];
            0: string[];
            1: string[];
        }>;
        DailySpendingRatioSet: ContractEvent<string>;
        ExchangeSpenderAdded: ContractEvent<string>;
        ExchangeSpenderRemoved: ContractEvent<string>;
        OtherReserveAddressAdded: ContractEvent<string>;
        OtherReserveAddressRemoved: ContractEvent<{
            otherReserveAddress: string;
            index: string;
            0: string;
            1: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        ReserveGoldTransferred: ContractEvent<{
            spender: string;
            to: string;
            value: string;
            0: string;
            1: string;
            2: string;
        }>;
        SpenderAdded: ContractEvent<string>;
        SpenderRemoved: ContractEvent<string>;
        TobinTaxReserveRatioSet: ContractEvent<string>;
        TobinTaxSet: ContractEvent<string>;
        TobinTaxStalenessThresholdSet: ContractEvent<string>;
        TokenAdded: ContractEvent<string>;
        TokenRemoved: ContractEvent<{
            token: string;
            index: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newReserve(web3: Web3, address: string): Reserve;
