/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface Election extends Contract {
    clone(): Election;
    methods: {
        checkProofOfPossession(sender: string, blsKey: string | number[], blsPop: string | number[]): CeloTxObject<boolean>;
        electabilityThreshold(): CeloTxObject<string>;
        electableValidators(): CeloTxObject<{
            min: string;
            max: string;
            0: string;
            1: string;
        }>;
        fractionMulExp(aNumerator: number | string, aDenominator: number | string, bNumerator: number | string, bDenominator: number | string, exponent: number | string, _decimals: number | string): CeloTxObject<{
            0: string;
            1: string;
        }>;
        getBlockNumberFromHeader(header: string | number[]): CeloTxObject<string>;
        getEpochNumber(): CeloTxObject<string>;
        getEpochNumberOfBlock(blockNumber: number | string): CeloTxObject<string>;
        getEpochSize(): CeloTxObject<string>;
        getParentSealBitmap(blockNumber: number | string): CeloTxObject<string>;
        getVerifiedSealBitmapFromHeader(header: string | number[]): CeloTxObject<string>;
        hashHeader(header: string | number[]): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        maxNumGroupsVotedFor(): CeloTxObject<string>;
        minQuorumSize(blockNumber: number | string): CeloTxObject<string>;
        minQuorumSizeInCurrentSet(): CeloTxObject<string>;
        numberValidatorsInCurrentSet(): CeloTxObject<string>;
        numberValidatorsInSet(blockNumber: number | string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        validatorSignerAddressFromCurrentSet(index: number | string): CeloTxObject<string>;
        validatorSignerAddressFromSet(index: number | string, blockNumber: number | string): CeloTxObject<string>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string, minElectableValidators: number | string, maxElectableValidators: number | string, _maxNumGroupsVotedFor: number | string, _electabilityThreshold: number | string): CeloTxObject<void>;
        setElectableValidators(min: number | string, max: number | string): CeloTxObject<boolean>;
        getElectableValidators(): CeloTxObject<{
            0: string;
            1: string;
        }>;
        setMaxNumGroupsVotedFor(_maxNumGroupsVotedFor: number | string): CeloTxObject<boolean>;
        setElectabilityThreshold(threshold: number | string): CeloTxObject<boolean>;
        getElectabilityThreshold(): CeloTxObject<string>;
        vote(group: string, value: number | string, lesser: string, greater: string): CeloTxObject<boolean>;
        activate(group: string): CeloTxObject<boolean>;
        hasActivatablePendingVotes(account: string, group: string): CeloTxObject<boolean>;
        revokePending(group: string, value: number | string, lesser: string, greater: string, index: number | string): CeloTxObject<boolean>;
        revokeAllActive(group: string, lesser: string, greater: string, index: number | string): CeloTxObject<boolean>;
        revokeActive(group: string, value: number | string, lesser: string, greater: string, index: number | string): CeloTxObject<boolean>;
        getTotalVotesByAccount(account: string): CeloTxObject<string>;
        getPendingVotesForGroupByAccount(group: string, account: string): CeloTxObject<string>;
        getActiveVotesForGroupByAccount(group: string, account: string): CeloTxObject<string>;
        getTotalVotesForGroupByAccount(group: string, account: string): CeloTxObject<string>;
        getActiveVoteUnitsForGroupByAccount(group: string, account: string): CeloTxObject<string>;
        getActiveVoteUnitsForGroup(group: string): CeloTxObject<string>;
        getTotalVotesForGroup(group: string): CeloTxObject<string>;
        getActiveVotesForGroup(group: string): CeloTxObject<string>;
        getPendingVotesForGroup(group: string): CeloTxObject<string>;
        getGroupEligibility(group: string): CeloTxObject<boolean>;
        getGroupEpochRewards(group: string, totalEpochRewards: number | string, uptimes: (number | string)[]): CeloTxObject<string>;
        distributeEpochRewards(group: string, value: number | string, lesser: string, greater: string): CeloTxObject<void>;
        markGroupIneligible(group: string): CeloTxObject<void>;
        markGroupEligible(group: string, lesser: string, greater: string): CeloTxObject<void>;
        getGroupsVotedForByAccount(account: string): CeloTxObject<string[]>;
        canReceiveVotes(group: string, value: number | string): CeloTxObject<boolean>;
        getNumVotesReceivable(group: string): CeloTxObject<string>;
        getTotalVotes(): CeloTxObject<string>;
        getActiveVotes(): CeloTxObject<string>;
        getEligibleValidatorGroups(): CeloTxObject<string[]>;
        getTotalVotesForEligibleValidatorGroups(): CeloTxObject<{
            groups: string[];
            values: string[];
            0: string[];
            1: string[];
        }>;
        electValidatorSigners(): CeloTxObject<string[]>;
        electNValidatorSigners(minElectableValidators: number | string, maxElectableValidators: number | string): CeloTxObject<string[]>;
        getCurrentValidatorSigners(): CeloTxObject<string[]>;
        forceDecrementVotes(account: string, value: number | string, lessers: string[], greaters: string[], indices: (number | string)[]): CeloTxObject<string>;
    };
    events: {
        ElectabilityThresholdSet: ContractEvent<string>;
        ElectableValidatorsSet: ContractEvent<{
            min: string;
            max: string;
            0: string;
            1: string;
        }>;
        EpochRewardsDistributedToVoters: ContractEvent<{
            group: string;
            value: string;
            0: string;
            1: string;
        }>;
        MaxNumGroupsVotedForSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        ValidatorGroupActiveVoteRevoked: ContractEvent<{
            account: string;
            group: string;
            value: string;
            units: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        ValidatorGroupMarkedEligible: ContractEvent<string>;
        ValidatorGroupMarkedIneligible: ContractEvent<string>;
        ValidatorGroupPendingVoteRevoked: ContractEvent<{
            account: string;
            group: string;
            value: string;
            0: string;
            1: string;
            2: string;
        }>;
        ValidatorGroupVoteActivated: ContractEvent<{
            account: string;
            group: string;
            value: string;
            units: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        ValidatorGroupVoteCast: ContractEvent<{
            account: string;
            group: string;
            value: string;
            0: string;
            1: string;
            2: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newElection(web3: Web3, address: string): Election;
