/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface Proxy extends Contract {
    clone(): Proxy;
    methods: {
        _transferOwnership(newOwner: string): CeloTxObject<void>;
        _setAndInitializeImplementation(implementation: string, callbackData: string | number[]): CeloTxObject<void>;
        _getImplementation(): CeloTxObject<string>;
        _setImplementation(implementation: string): CeloTxObject<void>;
        _getOwner(): CeloTxObject<string>;
    };
    events: {
        ImplementationSet: ContractEvent<string>;
        OwnerSet: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newProxy(web3: Web3, address: string): Proxy;
