/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface GovernanceApproverMultiSig extends Contract {
    clone(): GovernanceApproverMultiSig;
    methods: {
        MAX_OWNER_COUNT(): CeloTxObject<string>;
        addOwner(owner: string): CeloTxObject<void>;
        changeInternalRequirement(_internalRequired: number | string): CeloTxObject<void>;
        changeRequirement(_required: number | string): CeloTxObject<void>;
        confirmTransaction(transactionId: number | string): CeloTxObject<void>;
        confirmations(arg0: number | string, arg1: string): CeloTxObject<boolean>;
        executeTransaction(transactionId: number | string): CeloTxObject<void>;
        getConfirmationCount(transactionId: number | string): CeloTxObject<string>;
        getConfirmations(transactionId: number | string): CeloTxObject<string[]>;
        getOwners(): CeloTxObject<string[]>;
        getTransactionCount(pending: boolean, executed: boolean): CeloTxObject<string>;
        getTransactionIds(from: number | string, to: number | string, pending: boolean, executed: boolean): CeloTxObject<string[]>;
        initialize(_owners: string[], _required: number | string, _internalRequired: number | string): CeloTxObject<void>;
        initialized(): CeloTxObject<boolean>;
        internalRequired(): CeloTxObject<string>;
        isConfirmed(transactionId: number | string): CeloTxObject<boolean>;
        isOwner(arg0: string): CeloTxObject<boolean>;
        owners(arg0: number | string): CeloTxObject<string>;
        removeOwner(owner: string): CeloTxObject<void>;
        replaceOwner(owner: string, newOwner: string): CeloTxObject<void>;
        required(): CeloTxObject<string>;
        revokeConfirmation(transactionId: number | string): CeloTxObject<void>;
        submitTransaction(destination: string, value: number | string, data: string | number[]): CeloTxObject<string>;
        transactionCount(): CeloTxObject<string>;
        transactions(arg0: number | string): CeloTxObject<{
            destination: string;
            value: string;
            data: string;
            executed: boolean;
            0: string;
            1: string;
            2: string;
            3: boolean;
        }>;
    };
    events: {
        Confirmation: ContractEvent<{
            sender: string;
            transactionId: string;
            0: string;
            1: string;
        }>;
        Deposit: ContractEvent<{
            sender: string;
            value: string;
            0: string;
            1: string;
        }>;
        Execution: ContractEvent<{
            transactionId: string;
            returnData: string;
            0: string;
            1: string;
        }>;
        InternalRequirementChange: ContractEvent<string>;
        OwnerAddition: ContractEvent<string>;
        OwnerRemoval: ContractEvent<string>;
        RequirementChange: ContractEvent<string>;
        Revocation: ContractEvent<{
            sender: string;
            transactionId: string;
            0: string;
            1: string;
        }>;
        Submission: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newGovernanceApproverMultiSig(web3: Web3, address: string): GovernanceApproverMultiSig;
