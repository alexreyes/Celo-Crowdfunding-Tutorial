/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface DowntimeSlasher extends Contract {
    clone(): DowntimeSlasher;
    methods: {
        bitmaps(arg0: string, arg1: number | string, arg2: number | string): CeloTxObject<string>;
        checkProofOfPossession(sender: string, blsKey: string | number[], blsPop: string | number[]): CeloTxObject<boolean>;
        fractionMulExp(aNumerator: number | string, aDenominator: number | string, bNumerator: number | string, bDenominator: number | string, exponent: number | string, _decimals: number | string): CeloTxObject<{
            0: string;
            1: string;
        }>;
        getBlockNumberFromHeader(header: string | number[]): CeloTxObject<string>;
        getEpochNumber(): CeloTxObject<string>;
        getEpochNumberOfBlock(blockNumber: number | string): CeloTxObject<string>;
        getEpochSize(): CeloTxObject<string>;
        getParentSealBitmap(blockNumber: number | string): CeloTxObject<string>;
        getVerifiedSealBitmapFromHeader(header: string | number[]): CeloTxObject<string>;
        groupMembershipAtBlock(validator: string, blockNumber: number | string, groupMembershipHistoryIndex: number | string): CeloTxObject<string>;
        hashHeader(header: string | number[]): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        lastSlashedBlock(arg0: string): CeloTxObject<string>;
        minQuorumSize(blockNumber: number | string): CeloTxObject<string>;
        minQuorumSizeInCurrentSet(): CeloTxObject<string>;
        numberValidatorsInCurrentSet(): CeloTxObject<string>;
        numberValidatorsInSet(blockNumber: number | string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        setSlashingIncentives(penalty: number | string, reward: number | string): CeloTxObject<void>;
        slashableDowntime(): CeloTxObject<string>;
        slashingIncentives(): CeloTxObject<{
            penalty: string;
            reward: string;
            0: string;
            1: string;
        }>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        validatorSignerAddressFromCurrentSet(index: number | string): CeloTxObject<string>;
        validatorSignerAddressFromSet(index: number | string, blockNumber: number | string): CeloTxObject<string>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string, _penalty: number | string, _reward: number | string, _slashableDowntime: number | string): CeloTxObject<void>;
        setSlashableDowntime(interval: number | string): CeloTxObject<void>;
        getBitmapForInterval(startBlock: number | string, endBlock: number | string): CeloTxObject<string>;
        setBitmapForInterval(startBlock: number | string, endBlock: number | string): CeloTxObject<string>;
        wasDownForInterval(startBlock: number | string, endBlock: number | string, signerIndex: number | string): CeloTxObject<boolean>;
        isBitmapSetForInterval(startBlock: number | string, endBlock: number | string): CeloTxObject<boolean>;
        wasDownForIntervals(startBlocks: (number | string)[], endBlocks: (number | string)[], signerIndices: (number | string)[]): CeloTxObject<boolean>;
        slash(startBlocks: (number | string)[], endBlocks: (number | string)[], signerIndices: (number | string)[], groupMembershipHistoryIndex: number | string, validatorElectionLessers: string[], validatorElectionGreaters: string[], validatorElectionIndices: (number | string)[], groupElectionLessers: string[], groupElectionGreaters: string[], groupElectionIndices: (number | string)[]): CeloTxObject<void>;
    };
    events: {
        BitmapSetForInterval: ContractEvent<{
            sender: string;
            startBlock: string;
            endBlock: string;
            bitmap: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        DowntimeSlashPerformed: ContractEvent<{
            validator: string;
            startBlock: string;
            endBlock: string;
            0: string;
            1: string;
            2: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        SlashableDowntimeSet: ContractEvent<string>;
        SlashingIncentivesSet: ContractEvent<{
            penalty: string;
            reward: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newDowntimeSlasher(web3: Web3, address: string): DowntimeSlasher;
