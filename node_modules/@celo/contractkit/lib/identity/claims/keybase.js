"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cross_fetch_1 = __importDefault(require("cross-fetch"));
var Either_1 = require("fp-ts/lib/Either");
var metadata_1 = require("../metadata");
var claim_1 = require("./claim");
var types_1 = require("./types");
exports.keybaseFilePathToProof = ".well-known/celo/";
exports.proofFileName = function (address) { return "verify-" + address + ".json"; };
exports.targetURL = function (username, address) {
    return "https://" + username + ".keybase.pub/" + exports.keybaseFilePathToProof + exports.proofFileName(address);
};
// If verification encounters an error, returns the error message as a string
// otherwise returns undefined when successful
function verifyKeybaseClaim(kit, claim, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var resp, jsonResp, parsedClaim, hasValidSignature, parsedKeybaseClaim, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    return [4 /*yield*/, cross_fetch_1.default(exports.targetURL(claim.username, signer))];
                case 1:
                    resp = _a.sent();
                    if (!resp.ok) {
                        return [2 /*return*/, "Proof of ownership could not be retrieved at " + exports.targetURL(claim.username, signer) + ", request yielded " + resp.status + " status code"];
                    }
                    return [4 /*yield*/, resp.json()];
                case 2:
                    jsonResp = _a.sent();
                    parsedClaim = claim_1.SignedClaimType.decode(jsonResp);
                    if (Either_1.isLeft(parsedClaim)) {
                        return [2 /*return*/, 'Claim is incorrectly formatted'];
                    }
                    return [4 /*yield*/, metadata_1.IdentityMetadataWrapper.verifySignerForAddress(kit, claim_1.hashOfClaim(parsedClaim.right.claim), parsedClaim.right.signature, signer)];
                case 3:
                    hasValidSignature = _a.sent();
                    if (!hasValidSignature) {
                        return [2 /*return*/, 'Claim does not contain a valid signature'];
                    }
                    parsedKeybaseClaim = claim_1.KeybaseClaimType.decode(parsedClaim.right.claim);
                    if (Either_1.isLeft(parsedKeybaseClaim)) {
                        return [2 /*return*/, 'Hosted claim is not a Keybase claim'];
                    }
                    if (parsedKeybaseClaim.right.username !== claim.username) {
                        return [2 /*return*/, 'Usernames do not match'];
                    }
                    return [2 /*return*/];
                case 4:
                    error_1 = _a.sent();
                    return [2 /*return*/, 'Could not verify Keybase claim: ' + error_1];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.verifyKeybaseClaim = verifyKeybaseClaim;
exports.createKeybaseClaim = function (username) { return ({
    username: username,
    timestamp: types_1.now(),
    type: types_1.ClaimTypes.KEYBASE,
}); };
//# sourceMappingURL=keybase.js.map