"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var connect_1 = require("@celo/connect");
var wallet_local_1 = require("@celo/wallet-local");
var bignumber_js_1 = require("bignumber.js");
var net_1 = __importDefault(require("net"));
var web3_1 = __importDefault(require("web3"));
var address_registry_1 = require("./address-registry");
var base_1 = require("./base");
var celo_tokens_1 = require("./celo-tokens");
var contract_cache_1 = require("./contract-cache");
var web3_contract_cache_1 = require("./web3-contract-cache");
/**
 * Creates a new instance of `ContractKit` give a nodeUrl
 * @param url CeloBlockchain node url
 * @optional wallet to reuse or add a wallet different that the default (example ledger-wallet)
 */
function newKit(url, wallet) {
    var web3 = url.endsWith('.ipc')
        ? new web3_1.default(new web3_1.default.providers.IpcProvider(url, net_1.default))
        : new web3_1.default(url);
    return newKitFromWeb3(web3, wallet);
}
exports.newKit = newKit;
/**
 * Creates a new instance of the `ContractKit` with a web3 instance
 * @param web3 Web3 instance
 */
function newKitFromWeb3(web3, wallet) {
    if (wallet === void 0) { wallet = new wallet_local_1.LocalWallet(); }
    if (!web3.currentProvider) {
        throw new Error('Must have a valid Provider');
    }
    return new ContractKit(new connect_1.Connection(web3, wallet));
}
exports.newKitFromWeb3 = newKitFromWeb3;
var ContractKit = /** @class */ (function () {
    function ContractKit(connection) {
        this.connection = connection;
        // TODO: remove once cUSD gasPrice is available on minimumClientVersion node rpc
        this.gasPriceSuggestionMultiplier = 5;
        this.registry = new address_registry_1.AddressRegistry(this);
        this._web3Contracts = new web3_contract_cache_1.Web3ContractCache(this);
        this.contracts = new contract_cache_1.WrapperCache(this);
        this.celoTokens = new celo_tokens_1.CeloTokens(this);
    }
    ContractKit.prototype.getWallet = function () {
        return this.connection.wallet;
    };
    ContractKit.prototype.getTotalBalance = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var lockedCelo, lockedBalance, pending, err_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.contracts.getLockedGold()];
                    case 1:
                        lockedCelo = _b.sent();
                        return [4 /*yield*/, lockedCelo.getAccountTotalLockedGold(address)];
                    case 2:
                        lockedBalance = _b.sent();
                        pending = new bignumber_js_1.BigNumber(0);
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, lockedCelo.getPendingWithdrawalsTotalValue(address)];
                    case 4:
                        pending = _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _b.sent();
                        return [3 /*break*/, 6];
                    case 6:
                        _a = [{ lockedCELO: lockedBalance, pending: pending }];
                        return [4 /*yield*/, this.celoTokens.balancesOf(address)];
                    case 7: return [2 /*return*/, __assign.apply(void 0, _a.concat([(_b.sent())]))];
                }
            });
        });
    };
    ContractKit.prototype.getNetworkConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var celoTokenAddresses, promises, contracts, res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.celoTokens.forEachCeloToken(function (info) {
                            return _this.registry.addressFor(info.contract);
                        })
                        // There can only be `10` unique parametrized types in Promise.all call, that is how
                        // its typescript typing is setup. Thus, since we crossed threshold of 10
                        // have to explicitly cast it to just any type and discard type information.
                    ];
                    case 1:
                        celoTokenAddresses = _a.sent();
                        promises = [
                            this.contracts.getExchange(celo_tokens_1.StableToken.cUSD),
                            this.contracts.getElection(),
                            this.contracts.getAttestations(),
                            this.contracts.getGovernance(),
                            this.contracts.getLockedGold(),
                            this.contracts.getSortedOracles(),
                            this.contracts.getGasPriceMinimum(),
                            this.contracts.getReserve(),
                            this.contracts.getStableToken(celo_tokens_1.StableToken.cUSD),
                            this.contracts.getValidators(),
                            this.contracts.getDowntimeSlasher(),
                            this.contracts.getBlockchainParameters(),
                        ];
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        contracts = _a.sent();
                        return [4 /*yield*/, Promise.all([
                                contracts[0].getConfig(),
                                contracts[1].getConfig(),
                                contracts[2].getConfig(Object.values(celoTokenAddresses)),
                                contracts[3].getConfig(),
                                contracts[4].getConfig(),
                                contracts[5].getConfig(),
                                contracts[6].getConfig(),
                                contracts[7].getConfig(),
                                contracts[8].getConfig(),
                                contracts[9].getConfig(),
                                contracts[10].getConfig(),
                                contracts[11].getConfig(),
                            ])];
                    case 3:
                        res = _a.sent();
                        return [2 /*return*/, {
                                exchange: res[0],
                                election: res[1],
                                attestations: res[2],
                                governance: res[3],
                                lockedGold: res[4],
                                sortedOracles: res[5],
                                gasPriceMinimum: res[6],
                                reserve: res[7],
                                stableToken: res[8],
                                validators: res[9],
                                downtimeSlasher: res[10],
                                blockchainParameters: res[11],
                            }];
                }
            });
        });
    };
    ContractKit.prototype.getHumanReadableNetworkConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var celoTokenAddresses, promises, contracts, res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.celoTokens.forEachCeloToken(function (info) {
                            return _this.registry.addressFor(info.contract);
                        })];
                    case 1:
                        celoTokenAddresses = _a.sent();
                        promises = [
                            this.contracts.getExchange(celo_tokens_1.StableToken.cUSD),
                            this.contracts.getElection(),
                            this.contracts.getAttestations(),
                            this.contracts.getGovernance(),
                            this.contracts.getLockedGold(),
                            this.contracts.getSortedOracles(),
                            this.contracts.getGasPriceMinimum(),
                            this.contracts.getReserve(),
                            this.contracts.getStableToken(celo_tokens_1.StableToken.cUSD),
                            this.contracts.getValidators(),
                            this.contracts.getDowntimeSlasher(),
                            this.contracts.getBlockchainParameters(),
                        ];
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        contracts = _a.sent();
                        return [4 /*yield*/, Promise.all([
                                contracts[0].getHumanReadableConfig(),
                                contracts[1].getConfig(),
                                contracts[2].getHumanReadableConfig(Object.values(celoTokenAddresses)),
                                contracts[3].getHumanReadableConfig(),
                                contracts[4].getHumanReadableConfig(),
                                contracts[5].getHumanReadableConfig(),
                                contracts[6].getConfig(),
                                contracts[7].getConfig(),
                                contracts[8].getHumanReadableConfig(),
                                contracts[9].getHumanReadableConfig(),
                                contracts[10].getHumanReadableConfig(),
                                contracts[11].getConfig(),
                            ])];
                    case 3:
                        res = _a.sent();
                        return [2 /*return*/, {
                                exchange: res[0],
                                election: res[1],
                                attestations: res[2],
                                governance: res[3],
                                lockedGold: res[4],
                                sortedOracles: res[5],
                                gasPriceMinimum: res[6],
                                reserve: res[7],
                                stableToken: res[8],
                                validators: res[9],
                                downtimeSlasher: res[10],
                                blockchainParameters: res[11],
                            }];
                }
            });
        });
    };
    /**
     * Set CeloToken to use to pay for gas fees
     * @param tokenContract CELO (GoldToken) or a supported StableToken contract
     */
    ContractKit.prototype.setFeeCurrency = function (tokenContract) {
        return __awaiter(this, void 0, void 0, function () {
            var address, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(tokenContract === base_1.CeloContract.GoldToken)) return [3 /*break*/, 1];
                        _a = undefined;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.registry.addressFor(tokenContract)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        address = _a;
                        if (!address) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.updateGasPriceInConnectionLayer(address)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        this.connection.defaultFeeCurrency = address;
                        return [2 /*return*/];
                }
            });
        });
    };
    // TODO: remove once cUSD gasPrice is available on minimumClientVersion node rpc
    ContractKit.prototype.updateGasPriceInConnectionLayer = function (currency) {
        return __awaiter(this, void 0, void 0, function () {
            var gasPriceMinimum, rawGasPrice, gasPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.getGasPriceMinimum()];
                    case 1:
                        gasPriceMinimum = _a.sent();
                        return [4 /*yield*/, gasPriceMinimum.getGasPriceMinimum(currency)];
                    case 2:
                        rawGasPrice = _a.sent();
                        gasPrice = rawGasPrice.multipliedBy(this.gasPriceSuggestionMultiplier).toFixed();
                        return [4 /*yield*/, this.connection.setGasPriceForCurrency(currency, gasPrice)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ContractKit.prototype.getEpochSize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var validators, epochSize;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.getValidators()];
                    case 1:
                        validators = _a.sent();
                        return [4 /*yield*/, validators.getEpochSize()];
                    case 2:
                        epochSize = _a.sent();
                        return [2 /*return*/, epochSize.toNumber()];
                }
            });
        });
    };
    ContractKit.prototype.getFirstBlockNumberForEpoch = function (epochNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var epochSize;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getEpochSize()
                        // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
                    ];
                    case 1:
                        epochSize = _a.sent();
                        // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
                        if (epochNumber === 0) {
                            // No first block for epoch 0
                            return [2 /*return*/, 0];
                        }
                        return [2 /*return*/, (epochNumber - 1) * epochSize + 1];
                }
            });
        });
    };
    ContractKit.prototype.getLastBlockNumberForEpoch = function (epochNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var epochSize, firstBlockNumberForEpoch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getEpochSize()
                        // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
                    ];
                    case 1:
                        epochSize = _a.sent();
                        // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
                        if (epochNumber === 0) {
                            return [2 /*return*/, 0];
                        }
                        return [4 /*yield*/, this.getFirstBlockNumberForEpoch(epochNumber)];
                    case 2:
                        firstBlockNumberForEpoch = _a.sent();
                        return [2 /*return*/, firstBlockNumberForEpoch + (epochSize - 1)];
                }
            });
        });
    };
    ContractKit.prototype.getEpochNumberOfBlock = function (blockNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var epochSize, epochNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getEpochSize()
                        // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
                    ];
                    case 1:
                        epochSize = _a.sent();
                        epochNumber = Math.floor(blockNumber / epochSize);
                        if (blockNumber % epochSize === 0) {
                            return [2 /*return*/, epochNumber];
                        }
                        else {
                            return [2 /*return*/, epochNumber + 1];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    // *** NOTICE ***
    // Next functions exists for backwards compatibility
    // These should be consumed via connection to avoid future deprecation issues
    ContractKit.prototype.addAccount = function (privateKey) {
        this.connection.addAccount(privateKey);
    };
    Object.defineProperty(ContractKit.prototype, "defaultAccount", {
        get: function () {
            return this.connection.defaultAccount;
        },
        set: function (address) {
            this.connection.defaultAccount = address;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContractKit.prototype, "gasInflationFactor", {
        get: function () {
            return this.connection.defaultGasInflationFactor;
        },
        set: function (factor) {
            this.connection.defaultGasInflationFactor = factor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContractKit.prototype, "gasPrice", {
        get: function () {
            return this.connection.defaultGasPrice;
        },
        set: function (price) {
            this.connection.defaultGasPrice = price;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContractKit.prototype, "defaultFeeCurrency", {
        get: function () {
            return this.connection.defaultFeeCurrency;
        },
        set: function (address) {
            this.connection.defaultFeeCurrency = address;
        },
        enumerable: true,
        configurable: true
    });
    ContractKit.prototype.isListening = function () {
        return this.connection.isListening();
    };
    ContractKit.prototype.isSyncing = function () {
        return this.connection.isSyncing();
    };
    ContractKit.prototype.fillGasPrice = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(tx.feeCurrency && tx.gasPrice === '0')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateGasPriceInConnectionLayer(tx.feeCurrency)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.connection.fillGasPrice(tx)];
                }
            });
        });
    };
    ContractKit.prototype.sendTransaction = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.connection.sendTransaction(tx)];
            });
        });
    };
    ContractKit.prototype.sendTransactionObject = function (txObj, tx) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.connection.sendTransactionObject(txObj, tx)];
            });
        });
    };
    ContractKit.prototype.signTypedData = function (signer, typedData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.connection.signTypedData(signer, typedData)];
            });
        });
    };
    ContractKit.prototype.stop = function () {
        this.connection.stop();
    };
    Object.defineProperty(ContractKit.prototype, "web3", {
        get: function () {
            return this.connection.web3;
        },
        enumerable: true,
        configurable: true
    });
    return ContractKit;
}());
exports.ContractKit = ContractKit;
//# sourceMappingURL=kit.js.map