import { Connection } from '../connection';
import { CeloTx, CeloTxObject, CeloTxReceipt } from '../types';
import { TransactionResult } from './tx-result';
export declare type CeloTransactionParams = Omit<CeloTx, 'data'>;
export declare function toTransactionObject<O>(connection: Connection, txo: CeloTxObject<O>, defaultParams?: CeloTransactionParams): CeloTransactionObject<O>;
export declare class CeloTransactionObject<O> {
    private connection;
    readonly txo: CeloTxObject<O>;
    readonly defaultParams?: Pick<CeloTx, "feeCurrency" | "gatewayFeeRecipient" | "gatewayFee" | "from" | "to" | "value" | "gas" | "gasPrice" | "nonce" | "chainId" | "common" | "chain" | "hardfork"> | undefined;
    constructor(connection: Connection, txo: CeloTxObject<O>, defaultParams?: Pick<CeloTx, "feeCurrency" | "gatewayFeeRecipient" | "gatewayFee" | "from" | "to" | "value" | "gas" | "gasPrice" | "nonce" | "chainId" | "common" | "chain" | "hardfork"> | undefined);
    /** send the transaction to the chain */
    send: (params?: Pick<CeloTx, "feeCurrency" | "gatewayFeeRecipient" | "gatewayFee" | "from" | "to" | "value" | "gas" | "gasPrice" | "nonce" | "chainId" | "common" | "chain" | "hardfork"> | undefined) => Promise<TransactionResult>;
    /** send the transaction and waits for the receipt */
    sendAndWaitForReceipt: (params?: Pick<CeloTx, "feeCurrency" | "gatewayFeeRecipient" | "gatewayFee" | "from" | "to" | "value" | "gas" | "gasPrice" | "nonce" | "chainId" | "common" | "chain" | "hardfork"> | undefined) => Promise<CeloTxReceipt>;
}
